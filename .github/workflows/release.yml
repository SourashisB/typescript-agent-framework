name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
      - '.github/workflows/release.yml'

jobs:
  release:
    permissions:
      contents: write
      packages: write
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set access public

      - name: Build packages
        run: yarn build

      - name: Test packages
        run: yarn test
      
      - name: Detect changed packages
        id: changed_packages
        run: |
          # Create a JSON array of packages
          PACKAGES_JSON=$(find packages -type f -name "package.json" -not -path "*/node_modules/*" | 
                          grep -o 'packages/[^/]*' | 
                          sort | 
                          uniq | 
                          jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES_JSON" >> $GITHUB_OUTPUT
          
          # Also create a space-separated list for shell usage
          CHANGED_PACKAGES=$(find packages -type f -name "package.json" -not -path "*/node_modules/*" | 
                            grep -o 'packages/[^/]*' | 
                            sort | 
                            uniq)
          
          # Format for summary
          echo "## Packages to be released" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for PKG in $CHANGED_PACKAGES; do
            echo "- $PKG" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Release with semantic-release
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGED_PACKAGES: ${{ steps.changed_packages.outputs.packages }}
        run: |
          # Convert JSON array back to space-separated list for shell processing
          PACKAGES_LIST=$(echo '${{ steps.changed_packages.outputs.packages }}' | jq -r 'join(" ")')
          
          # Release each changed package
          RELEASE_SUMMARY=""
          for PKG in $PACKAGES_LIST; do
            echo "Publishing package: $PKG"
            cd $PKG
            
            # Get current version
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            
            # Check if .releaserc.json exists, create if not
            if [ ! -f .releaserc.json ]; then
              echo "Creating .releaserc.json from template"
              cp ../../.github/release-template.json .releaserc.json
            fi
            
            # For test-utils package, directly set the version to 0.1.x
            if [[ "$PKG" == "packages/test-utils" ]]; then
              # Force version to 0.1.x
              VERSION_PREFIX="0.1."
              # Check if there's a previous release
              PREV_RELEASE=$(npm view @xava-labs/test-utils versions --json 2>/dev/null || echo "[]")
              
              # Extract version numbers matching 0.1.x pattern
              PATCH_VERSIONS=$(echo $PREV_RELEASE | jq -r '.[] | select(startswith("0.1."))' 2>/dev/null | sed 's/0\.1\.//' || echo "")
              
              # Find highest patch number
              HIGHEST_PATCH=0
              for ver in $PATCH_VERSIONS; do
                if [[ $ver =~ ^[0-9]+$ && $ver -gt $HIGHEST_PATCH ]]; then
                  HIGHEST_PATCH=$ver
                fi
              done
              
              # Calculate next patch version
              NEXT_PATCH=$((HIGHEST_PATCH + 1))
              NEW_VERSION="${VERSION_PREFIX}${NEXT_PATCH}"
              
              # Update package.json with the new version
              npm version $NEW_VERSION --no-git-tag-version --allow-same-version
              
              echo "Explicitly setting test-utils version to $NEW_VERSION"
              # Run semantic-release with the explicit version
              RELEASE_OUTPUT=$(npx semantic-release --branches main --no-ci 2>&1 || true)
            # For MCP package, correctly handle versioning
            elif [[ "$PKG" == "packages/mcp" ]]; then
              # Get preferred version pattern based on current version
              if [[ "$CURRENT_VERSION" == 1.0.* ]]; then
                VERSION_PREFIX="1.0."
              else
                # Extract major.minor prefix
                VERSION_PREFIX=$(echo $CURRENT_VERSION | sed -E 's/([0-9]+\.[0-9]+)\..*/\1./')
              fi
              
              # Check if there's a previous release
              PREV_RELEASE=$(npm view @xava-labs/mcp versions --json 2>/dev/null || echo "[]")
              
              # Extract version numbers matching current pattern
              PATTERN_ESCAPE=$(echo $VERSION_PREFIX | sed 's/\./\\./g')
              PATCH_VERSIONS=$(echo $PREV_RELEASE | jq -r ".[] | select(startswith(\"$VERSION_PREFIX\"))" 2>/dev/null | sed "s/$PATTERN_ESCAPE//" || echo "")
              
              # Find highest patch number
              HIGHEST_PATCH=0
              for ver in $PATCH_VERSIONS; do
                if [[ $ver =~ ^[0-9]+$ && $ver -gt $HIGHEST_PATCH ]]; then
                  HIGHEST_PATCH=$ver
                fi
              done
              
              # Calculate next patch version
              NEXT_PATCH=$((HIGHEST_PATCH + 1))
              NEW_VERSION="${VERSION_PREFIX}${NEXT_PATCH}"
              
              # Update package.json with the new version
              npm version $NEW_VERSION --no-git-tag-version --allow-same-version
              
              echo "Explicitly setting mcp version to $NEW_VERSION"
              # Run semantic-release with the explicit version
              RELEASE_OUTPUT=$(npx semantic-release --branches main --no-ci 2>&1 || true)
            # If version starts with 0, force semantic-release to respect that  
            elif [[ "$CURRENT_VERSION" == 0.* ]]; then
              # Use dryRun first to determine the next version
              NEXT_VERSION=$(npx semantic-release --dry-run --branches main 2>&1 | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo "")
              
              if [[ -n "$NEXT_VERSION" ]]; then
                # Now modify package.json to have a version that's one less than the determined version
                MAJOR=$(echo $NEXT_VERSION | cut -d. -f1)
                MINOR=$(echo $NEXT_VERSION | cut -d. -f2)
                PATCH=$(echo $NEXT_VERSION | cut -d. -f3)
                
                if [[ $PATCH -gt 0 ]]; then
                  PATCH=$((PATCH - 1))
                elif [[ $MINOR -gt 0 ]]; then
                  MINOR=$((MINOR - 1))
                  PATCH=9
                else
                  MAJOR=$((MAJOR - 1))
                  MINOR=9
                  PATCH=9
                fi
                
                PREV_VERSION="$MAJOR.$MINOR.$PATCH"
                
                # Update package.json with one version behind
                npm version $PREV_VERSION --no-git-tag-version
                echo "Setting version to $PREV_VERSION to force next version as $NEXT_VERSION"
                
                # Run semantic-release
                RELEASE_OUTPUT=$(npx semantic-release --branches main 2>&1 || true)
              else
                # Fallback if can't determine next version
                RELEASE_OUTPUT=$(npx semantic-release --branches main 2>&1 || true)
              fi
            else
              RELEASE_OUTPUT=$(npx semantic-release --branches main 2>&1 || true)
            fi
            echo "$RELEASE_OUTPUT"
            
            # Extract new version if available
            if echo "$RELEASE_OUTPUT" | grep -q "Publishing version"; then
              NEW_VERSION=$(echo "$RELEASE_OUTPUT" | grep "Publishing version" | sed -E 's/.*Publishing version ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
              echo "Successfully published $PKG@$NEW_VERSION (was $CURRENT_VERSION)"
              RELEASE_SUMMARY="$RELEASE_SUMMARY\n### $PKG\n- Published: v$NEW_VERSION (was v$CURRENT_VERSION)\n"
            else
              echo "No new version to release for $PKG"
              RELEASE_SUMMARY="$RELEASE_SUMMARY\n### $PKG\n- No release needed (current: v$CURRENT_VERSION)\n"
            fi
            
            cd ../../
          done
          
          # Output summary
          echo -e "$RELEASE_SUMMARY" >> $GITHUB_STEP_SUMMARY
      
      - name: Output release status
        run: |
          echo "âœ… Release process completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Packages have been published to npm." >> $GITHUB_STEP_SUMMARY 